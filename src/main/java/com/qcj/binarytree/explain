https://mp.weixin.qq.com/s/a13Gtkn0zobJH9bzlPpN1w

二叉树

二叉树的种类：满，完全，平衡
https://www.cnblogs.com/love-yh/p/7423301.html
1、满二叉树
   所有叶结点同处于最底层（非底层结点均是内部结点），一个深度为k(>=-1)且有2^(k+1) - 1个结点。如图（图来源于veil的博客）：
2、完全二叉树
   叶结点只能出现在最底层的两层，且最底层叶结点均处于次底层叶结点的左侧。规模为n的完全二叉树，高度为
3、平衡二叉树
  平衡二叉树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 最小二叉平衡树的节点的公式如下 F(n)=F(n-1)+F(n-2)+1 这个类似于一个递归的数列，可以参考Fibonacci(斐波那契)数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量。（百度百科）



对于平衡二叉树要特别注意的是，不要求非叶节点都有两个子结点，仅要求两个子树的高度差的绝对值不超过1，或者为空树。

1. 红-黑树的特征

它主要有两个特征：
    1.节点都有颜色；
    2.在插入和删除的过程中，要遵循保持这些颜色的不同排列的规则。
        首先第一个特征很好解决，在节点类中添加一个数据字段，
        例如 boolean 型变量，以此来表示节点的颜色信息。
        第二个特征比较复杂，红-黑树有它的几个规则，如果遵循这些规则，那么树就是平衡的。

红-黑树的主要规则如下：
    1.每个节点不是红色就是黑色的；
    2.根节点总是黑色的；
    3.如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；
    4.从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。
    在红-黑树中插入的节点都是红色的，这不是偶然的，因为插入一个红色节点比插入一个黑色节点违背红-黑规则的可能性更小。原因是：插入黑色节点总会改变黑色高度（违背规则4），但是插入红色节点只有一半的机会会违背规则3。另外违背规则3比违背规则4要更容易修正。当插入一个新的节点时，可能会破坏这种平衡性，那么红-黑树是如何修正的呢？

2. 平衡性的修正
    红-黑树主要通过三种方式对平衡进行修正，
    改变节点颜色、左旋和右旋。
